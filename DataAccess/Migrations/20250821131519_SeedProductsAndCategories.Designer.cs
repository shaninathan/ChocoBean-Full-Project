// <auto-generated />
using System;
using ChocoBean.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ChocoBeanDbContext))]
    [Migration("20250821131519_SeedProductsAndCategories")]
    partial class SeedProductsAndCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "שוקולדים"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "קפסולות"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "מכונות קפה"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "מארזי מתנה"
                        });
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1000L);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitsInPackage")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "שוקולד חלב עם אגוזים קלויים",
                            Price = 20m,
                            ProductName = "שוקולד אגוזים",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "שוקולד חלב קלאסי",
                            Price = 18m,
                            ProductName = "שוקולד חלבי",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "שוקולד מריר איכותי 70%",
                            Price = 22m,
                            ProductName = "שוקולד מריר",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "טעם חזק ועשיר לאספרסו",
                            Price = 25m,
                            ProductName = "קפסולה אספרסו חזק",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "טעם עדין ורך לאספרסו",
                            Price = 25m,
                            ProductName = "קפסולה אספרסו חלש",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "קפסולות עם ניחוח אגוזי עדין",
                            Price = 27m,
                            ProductName = "קפסולה בטעם אגוזים",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Description = "קפסולות עם ארומת וניל עדינה",
                            Price = 27m,
                            ProductName = "קפסולה בטעם וניל",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Description = "קפסולות עם ניחוח קרמל מתקתק",
                            Price = 27m,
                            ProductName = "קפסולה בטעם קרמל",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            Description = "קפסולות עם ניחוח שוקולדי עשיר",
                            Price = 27m,
                            ProductName = "קפסולה בטעם שוקולד",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2,
                            Description = "קפסולות דקפאין בטעם מאוזן",
                            Price = 26m,
                            ProductName = "קפסולה דקפאין",
                            UnitsInPackage = 10
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Description = "מכונת קפה מעוצבת בגוון זהב",
                            Price = 799m,
                            ProductName = "מכונת קפה צבע זהב",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Description = "מכונת קפה אלגנטית בגוון שחור",
                            Price = 799m,
                            ProductName = "מכונת קפה צבע שחור",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4,
                            Description = "סט כוסות קפה עם פולי קפה טריים",
                            Price = 180m,
                            ProductName = "מארז מתנה כוסות+פולי קפה",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4,
                            Description = "מקציף חלב איכותי עם סט כוסות",
                            Price = 250m,
                            ProductName = "מארז מתנה מקציף+כוסות",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4,
                            Description = "מארז קפסולות מגוון צבעוני",
                            Price = 150m,
                            ProductName = "מארז מתנה קפסולות קפה צבעוניות",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            Description = "סט כוסות עם מבחר שוקולדים",
                            Price = 160m,
                            ProductName = "מארז מתנה שוקולד+כוסות",
                            UnitsInPackage = 1
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            Description = "מארז משולב שוקולדים וקפסולות",
                            Price = 190m,
                            ProductName = "מארז מתנה שוקולד+קפסולות",
                            UnitsInPackage = 1
                        });
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Order", b =>
                {
                    b.HasOne("ChocoBean.DataAccess.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.OrderItem", b =>
                {
                    b.HasOne("ChocoBean.DataAccess.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChocoBean.DataAccess.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Product", b =>
                {
                    b.HasOne("ChocoBean.DataAccess.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.UserProfile", b =>
                {
                    b.HasOne("ChocoBean.DataAccess.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ChocoBean.DataAccess.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ChocoBean.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
